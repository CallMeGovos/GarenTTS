import streamlit as st
import pandas as pd
import os
import io
import zipfile
import altair as alt
import requests

# --- C·∫§U H√åNH TRANG V√Ä BI·∫æN TO√ÄN C·ª§C ---
st.set_page_config(
    page_title="Garen God-King: D·ªØ Li·ªáu Voice Cloning",
    page_icon="üëë",
    layout="wide"
)

base_dir = os.getcwd()

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a dataset v√† file metadata
BASE_DATA_DIR  = os.path.join(base_dir, "DataGaren","wavs")
METADATA_FILE = os.path.join(base_dir, "DataGaren", "wavs","metadata.csv")
# AUDIO_FILES_SUBDIR = "" # N·∫øu audio n·∫±m trong th∆∞ m·ª•c con c·ªßa BASE_DATA_DIR
                         # Trong tr∆∞·ªùng h·ª£p n√†y, audio v√† metadata.csv c√πng c·∫•p trong BASE_DATA_DIR

@st.cache_data # Cache ƒë·ªÉ kh√¥ng ph·∫£i ƒë·ªçc file CSV m·ªói l·∫ßn v√†o
def load_metadata():
    """T·∫£i metadata t·ª´ file CSV v√† ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa file audio."""
    if not os.path.exists(METADATA_FILE):
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file metadata t·∫°i '{METADATA_FILE}'.")
        st.info(f"Vui l√≤ng ch·∫°y script crawl d·ªØ li·ªáu tr∆∞·ªõc ƒë·ªÉ t·∫°o ra file n√†y v√† c√°c file audio trong th∆∞ m·ª•c '{BASE_DATA_DIR}'.")
        return pd.DataFrame(columns=['filename', 'transcript', 'audio_path', 'audio_exists'])

    try:
        df = pd.read_csv(METADATA_FILE)
        if 'filename' not in df.columns or 'transcript' not in df.columns:
            st.error("File metadata.csv ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt: 'filename' v√† 'transcript'.")
            return pd.DataFrame(columns=['filename', 'transcript', 'audio_path', 'audio_exists'])

        # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß v√† ki·ªÉm tra file audio (ƒë·ªãnh d·∫°ng .wav theo script crawl)
        df['audio_path'] = df['filename'].apply(
            lambda x: os.path.join(BASE_DATA_DIR, str(x)) if pd.notna(x) else None
        )
        df['audio_exists'] = df['audio_path'].apply(lambda p: os.path.exists(p) if p else False)
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file metadata.csv: {e}")
        return pd.DataFrame(columns=['filename', 'transcript', 'audio_path', 'audio_exists'])

def display_data_table(df_display):
    """Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu v·ªõi t√™n file, n√∫t ph√°t audio, v√† transcript."""
    if df_display.empty:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc c·ªßa b·∫°n.")
        return

    st.write(f"Hi·ªÉn th·ªã {len(df_display)} b·∫£n ghi:")
    header_cols = st.columns([0.3, 0.15, 0.55]) # T√™n file, N√∫t ph√°t, Transcript
    with header_cols[0]: st.markdown("**T√™n File Audio (.wav)**")
    with header_cols[1]: st.markdown("**Ph√°t Audio**")
    with header_cols[2]: st.markdown("**Transcript**")
    st.divider()

    for _, row in df_display.iterrows(): # D√πng iterrows() cho DataFrame
        cols = st.columns([0.3, 0.15, 0.55])
        with cols[0]:
            st.code(row["filename"], language=None) # D√πng st.code cho t√™n file
        with cols[1]:
            if row["audio_exists"] and row["audio_path"]:
                try:
                    st.audio(row["audio_path"], format="audio/wav") # Ch·ªâ ƒë·ªãnh format
                except Exception:
                    st.error(f"L·ªói ph√°t: {row['filename']}")
            elif row["audio_path"]:
                 st.caption("File kh√¥ng t√¨m th·∫•y")
            else:
                 st.caption("-")
        with cols[2]:
            st.write(row["transcript"])
        st.divider()

# --- T·∫¢I D·ªÆ LI·ªÜU BAN ƒê·∫¶U ---
data_df = load_metadata()

# --- SIDEBAR ƒêI·ªÄU H∆Ø·ªöNG ---
st.sidebar.title("üëë Garen God-King")
st.sidebar.markdown("D·ªØ li·ªáu cho AI Voice Cloning")
st.sidebar.markdown("---")

page_options = ["Trang Ch·ªß", "Xem D·ªØ Li·ªáu", "Th·ªëng K√™ D·ªØ Li·ªáu", "T·∫£i D·ªØ Li·ªáu", "T·∫°o Audio"]
selected_page = st.sidebar.radio("ƒêi·ªÅu h∆∞·ªõng:", page_options)
st.sidebar.markdown("---")

if data_df is not None and not data_df.empty:
    st.sidebar.info(f"T·ªïng s·ªë b·∫£n ghi: {len(data_df)}")
    if 'audio_exists' in data_df.columns:
        valid_audio_count = data_df['audio_exists'].sum()
        st.sidebar.success(f"File audio c√≥ s·∫µn: {valid_audio_count}")
        if len(data_df) - valid_audio_count > 0 :
            st.sidebar.warning(f"Thi·∫øu file audio: {len(data_df) - valid_audio_count}")
else:
    st.sidebar.warning("Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y ch·∫°y script crawl.")


# --- N·ªòI DUNG C√ÅC TRANG ---
if selected_page == "Trang Ch·ªß":
    st.title("B·ªô D·ªØ Li·ªáu Gi·ªçng N√≥i Garen God-King (LMHT)")
    st.markdown(f"""
    Ch√†o m·ª´ng! ƒê√¢y l√† giao di·ªán kh√°m ph√° b·ªô d·ªØ li·ªáu gi·ªçng n√≥i c·ªßa Garen God-King t·ª´ League of Legends,
    ƒë∆∞·ª£c thu th·∫≠p t·ª± ƒë·ªông t·ª´ nh√≥m em qua trang (https://wiki.leagueoflegends.com/en-us/League_of_Legends_Wiki).

    **M·ª•c ƒë√≠ch:**
    * Cung c·∫•p b·ªô d·ªØ li·ªáu g·ªìm c√°c file √¢m thanh (`.wav`) v√† transcript t∆∞∆°ng ·ª©ng.
    * D·ªØ li·ªáu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c b√†i to√°n AI Voice Cloning, nghi√™n c·ª©u v·ªÅ gi·ªçng n√≥i.

    **Quy tr√¨nh Thu th·∫≠p D·ªØ li·ªáu (Crawl):**
    * D·ªØ li·ªáu ƒë∆∞·ª£c crawl t·ª´ trang audio c·ªßa Garen tr√™n League of Legends Wiki.
    * Script s·ª≠ d·ª•ng th∆∞ vi·ªán `requests` ƒë·ªÉ t·∫£i n·ªôi dung HTML v√† `BeautifulSoup4` ƒë·ªÉ ph√¢n t√≠ch, tr√≠ch xu·∫•t link audio v√† transcript.
    * C√°c file audio `.wav` v√† metadata (t√™n file, transcript) ƒë∆∞·ª£c l∆∞u tr·ªØ c·ª•c b·ªô trong th∆∞ m·ª•c `{BASE_DATA_DIR}`.
    * Script crawl ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·ªâ l·∫•y c√°c audio li√™n quan ƒë·∫øn "God-King Garen".

    **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng giao di·ªán:**
    * **Xem D·ªØ Li·ªáu:** Duy·ªát, t√¨m ki·∫øm v√† nghe c√°c m·∫´u audio.
    * **Th·ªëng K√™ D·ªØ Li·ªáu:** Xem th√¥ng tin t·ªïng quan v·ªÅ b·ªô d·ªØ li·ªáu (s·ªë l∆∞·ª£ng, ƒë·ªô d√†i transcript,...).
    * **T·∫£i D·ªØ Li·ªáu:** T·∫£i xu·ªëng file metadata (CSV) ho·∫∑c to√†n b·ªô file audio (ZIP).

    Giao di·ªán ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng **Streamlit**.
    """)
    st.image("https://wiki.leagueoflegends.com/en-us/images/Garen_God-KingSkin.jpg?f7032", # Garen God-King Splash
             caption="Garen, God-King", use_container_width=True)

elif selected_page == "Xem D·ªØ Li·ªáu":
    st.title("üîç Kh√°m Ph√° D·ªØ Li·ªáu Audio & Transcript")
    if data_df is not None and not data_df.empty:
        # --- B·ªò L·ªåC V√Ä T√åM KI·∫æM ---
        st.subheader("B·ªô l·ªçc v√† T√¨m ki·∫øm")
        search_col, filter_col = st.columns([3,2])
        with search_col:
            search_term = st.text_input("T√¨m ki·∫øm trong transcript:", key="search_transcript")
        with filter_col:
            show_only_existing_audio = st.checkbox("Ch·ªâ hi·ªÉn th·ªã b·∫£n ghi c√≥ file audio", value=True, key="filter_audio")

        filtered_df = data_df.copy()
        if show_only_existing_audio:
            filtered_df = filtered_df[filtered_df['audio_exists'] == True]
        if search_term:
            filtered_df = filtered_df[filtered_df['transcript'].astype(str).str.contains(search_term, case=False, na=False)]

        # --- PH√ÇN TRANG ---
        if not filtered_df.empty:
            items_per_page = st.selectbox("S·ªë m·ª•c m·ªói trang:", [5, 10, 20, 50], index=1, key="items_page")
            total_items = len(filtered_df)
            total_pages = max(1, (total_items + items_per_page - 1) // items_per_page)
            page_num_col, _ = st.columns([1,3])
            with page_num_col:
                page_number = st.number_input(f"Trang (1-{total_pages}):", min_value=1, max_value=total_pages, step=1, value=1, key="page_num")

            start_idx = (page_number - 1) * items_per_page
            end_idx = start_idx + items_per_page
            paginated_df = filtered_df.iloc[start_idx:end_idx]
            display_data_table(paginated_df)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi t√¨m ki·∫øm/b·ªô l·ªçc c·ªßa b·∫°n.")
    else:
        st.info(f"Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y ch·∫°y script crawl ƒë·ªÉ t·∫°o file `{METADATA_FILE}` v√† c√°c file audio.")

elif selected_page == "Th·ªëng K√™ D·ªØ Li·ªáu":
    st.title("üìä Th·ªëng K√™ B·ªô D·ªØ Li·ªáu Garen God-King")
    if data_df is not None and not data_df.empty and data_df['audio_exists'].sum() > 0:
        # Ch·ªâ th·ª±c hi·ªán th·ªëng k√™ tr√™n c√°c b·∫£n ghi c√≥ file audio t·ªìn t·∫°i
        stats_df = data_df[data_df['audio_exists']].copy() # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh SettingWithCopyWarning

        st.subheader("I. Th√¥ng Tin Chung")
        num_valid_records = len(stats_df)
        st.metric("T·ªïng s·ªë c·∫∑p Audio-Transcript h·ª£p l·ªá (c√≥ file audio)", num_valid_records)

        st.subheader("II. Ph√¢n T√≠ch Transcript")
        if 'transcript' in stats_df.columns:
            stats_df.loc[:, 'transcript_length_chars'] = stats_df['transcript'].astype(str).apply(len)
            stats_df.loc[:, 'transcript_length_words'] = stats_df['transcript'].astype(str).apply(lambda x: len(x.split()))

            avg_chars = stats_df['transcript_length_chars'].mean()
            avg_words = stats_df['transcript_length_words'].mean()
            st.write(f"- ƒê·ªô d√†i transcript trung b√¨nh: **{avg_chars:.2f} k√Ω t·ª±** / **{avg_words:.2f} t·ª´**.")

            col_hist1, col_hist2 = st.columns(2)
            with col_hist1:
                st.markdown("#### Ph√¢n b·ªë ƒë·ªô d√†i (k√Ω t·ª±)")
                chart_chars = alt.Chart(stats_df[['transcript_length_chars']]).mark_bar().encode(
                    alt.X("transcript_length_chars:Q", bin=alt.Bin(maxbins=20), title="S·ªë k√Ω t·ª±"),
                    alt.Y("count()", title="S·ªë l∆∞·ª£ng")
                ).properties(height=300)
                st.altair_chart(chart_chars, use_container_width=True)
            with col_hist2:
                st.markdown("#### Ph√¢n b·ªë ƒë·ªô d√†i (s·ªë t·ª´)")
                chart_words = alt.Chart(stats_df[['transcript_length_words']]).mark_bar().encode(
                    alt.X("transcript_length_words:Q", bin=alt.Bin(maxbins=20), title="S·ªë t·ª´"),
                    alt.Y("count()", title="S·ªë l∆∞·ª£ng")
                ).properties(height=300)
                st.altair_chart(chart_words, use_container_width=True)
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'transcript' ƒë·ªÉ ph√¢n t√≠ch.")



    elif data_df is not None and data_df['audio_exists'].sum() == 0 :
         st.warning("Kh√¥ng c√≥ file audio n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong th∆∞ m·ª•c d·ªØ li·ªáu ƒë·ªÉ th·ª±c hi·ªán th·ªëng k√™.")
    else:
        st.info(f"Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y ch·∫°y script crawl ƒë·ªÉ t·∫°o file `{METADATA_FILE}`.")


elif selected_page == "T·∫£i D·ªØ Li·ªáu":
    st.title("üì• T·∫£i Xu·ªëng D·ªØ Li·ªáu")
    if data_df is not None and not data_df.empty:
        st.subheader("1. T·∫£i File Metadata (CSV)")
        csv_export_df = data_df[data_df['audio_exists']][['filename', 'transcript']] # Ch·ªâ xu·∫•t metadata c·ªßa file audio t·ªìn t·∫°i
        if not csv_export_df.empty:
            csv_data = csv_export_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="T·∫£i Metadata (CSV)",
                data=csv_data,
                file_name="Garen_godking_metadata.csv",
                mime="text/csv",
            )
        else:
            st.info("Kh√¥ng c√≥ metadata n√†o (cho c√°c file audio t·ªìn t·∫°i) ƒë·ªÉ t·∫£i.")

        st.subheader("2. T·∫£i T·∫•t C·∫£ File Audio (.wav) Hi·ªán C√≥ (ZIP)")
        audio_files_to_zip = data_df[data_df['audio_exists'] == True]['audio_path'].tolist()
        if audio_files_to_zip:
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED, False) as zip_f:
                for file_path in audio_files_to_zip:
                    zip_f.write(file_path, arcname=os.path.basename(file_path))
            zip_buffer.seek(0)
            st.download_button(
                label=f"T·∫£i {len(audio_files_to_zip)} file audio (ZIP)",
                data=zip_buffer,
                file_name="Garen_godking_audio_files.zip",
                mime="application/zip"
            )
        else:
            st.info("Kh√¥ng c√≥ file audio n√†o t·ªìn t·∫°i ƒë·ªÉ t·∫°o file ZIP.")
    else:
        st.info(f"Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y ch·∫°y script crawl ƒë·ªÉ t·∫°o file `{METADATA_FILE}`.")
elif selected_page == "T·∫°o Audio":
    st.title("üé§ T·∫°o Audio")
    st.markdown("""
    Ch√†o m·ª´ng ƒë·∫øn v·ªõi trang t·∫°o audio s·ª≠ d·ª•ng Garen God-King!  
    Nh·∫≠p vƒÉn b·∫£n b√™n d∆∞·ªõi v√† nh·∫•n "T·∫°o Audio" ƒë·ªÉ nghe gi·ªçng n√≥i ƒë∆∞·ª£c t·∫°o b·ªüi m√¥ h√¨nh StyleTTS2.
    """)

    # Text input field
    text_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ t·∫°o gi·ªçng n√≥i:", "I am Garen, the God-King!", height=100)

    # Generate audio button
    if st.button("T·∫°o Audio"):
        if text_input.strip():
            try:
                # Send request to local Flask API (tts.py)
                with st.spinner("ƒêang t·∫°o audio..."):
                    response = requests.post(
                        "http://127.0.0.1:5000/generate_wav",
                        json={"text": text_input},
                        timeout=60  # Increased timeout for GPU processing
                    )

                if response.status_code == 200:
                    # Display success message
                    st.success("ƒê√£ t·∫°o audio th√†nh c√¥ng!")

                    # Display audio player
                    audio_data = io.BytesIO(response.content)
                    st.audio(audio_data, format="audio/wav", start_time=0)
                else:
                    error_msg = response.json().get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API.")
                    st.error(f"L·ªói khi t·∫°o audio: {error_msg}")
            except requests.exceptions.RequestException as e:
                st.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn API TTS: {str(e)}")
                st.warning("H√£y ƒë·∫£m b·∫£o r·∫±ng Flask API (`tts.py`) ƒëang ch·∫°y tr√™n m√°y c·ªßa b·∫°n t·∫°i `http://localhost:5000`. M·ªü m·ªôt terminal v√† ch·∫°y l·ªánh `python tts.py`.")
        else:
            st.warning("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n tr∆∞·ªõc khi t·∫°o audio.")
# --- FOOTER ---
st.sidebar.markdown("---")
st.sidebar.markdown(f"¬© {pd.Timestamp('today').year} - B√°o c√°o cu·ªëi k√¨ KTLT&PTDL 2025")
st.sidebar.markdown("SVTH: Tr∆∞∆°ng Qu·ªëc Kh√°nh - Nguy·ªÖn Tr·ªçng T√≠n - Nguy·ªÖn ƒê·ª©c Quang")